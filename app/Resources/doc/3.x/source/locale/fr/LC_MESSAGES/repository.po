# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, CCM Benchmark Group
# This file is distributed under the same license as the ting package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: ting 1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-07-05 17:04+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../repository.rst:5
msgid "Le Repository"
msgstr ""

#: ../../repository.rst:9
msgid "Au sujet du Repository"
msgstr ""

#: ../../repository.rst:10
msgid ""
"Le Repository va faire le lien entre votre objet entité et votre base de "
"données, par l'intermédiaire de l'objet ``Query``."
msgstr ""

#: ../../repository.rst:12
msgid ""
"Il est aussi responsable d'initialiser les ``Metadata`` qui concernent "
"votre entité afin de savoir comment mapper votre objet en base de "
"données."
msgstr ""

#: ../../repository.rst:17
msgid "Création des Metadata"
msgstr ""

#: ../../repository.rst:18
msgid "Comme un exemple est plus parlant qu'un long discours :"
msgstr ""

#: ../../repository.rst:70
msgid "Quelques précisions :"
msgstr ""

#: ../../repository.rst:62
msgid "fieldName correspond au nom de la propriété de votre entité"
msgstr ""

#: ../../repository.rst:63
msgid "columnName correspond au nom de la colonne dans votre base de données"
msgstr ""

#: ../../repository.rst:70
msgid "type correspond au type de votre variable avec comme valeur possibles :"
msgstr ""

#: ../../repository.rst:65
msgid "``int``"
msgstr ""

#: ../../repository.rst:66
msgid "``double``"
msgstr ""

#: ../../repository.rst:67
msgid "``string``"
msgstr ""

#: ../../repository.rst:68
msgid "``bool``"
msgstr ""

#: ../../repository.rst:69
msgid "``datetime``"
msgstr ""

#: ../../repository.rst:70
msgid "``json``"
msgstr ""

#: ../../repository.rst:72
msgid ""
"Les types ``bool``, ``datetime`` et ``json`` sont un peu particuliers, "
"car il s'agit de types considérés complexes et qui acceptent donc d'être "
"sérializés/désérializés via les options du serializer"
msgstr ""

#: ../../repository.rst:77
msgid "Disponible uniquement à partir de la version 3.2"
msgstr ""

#: ../../repository.rst:79
msgid ""
"getter permet de redéfinir le nom du getter (par defaut, le getter est "
"getFieldName)"
msgstr ""

#: ../../repository.rst:80
msgid ""
"setter permet de redéfinir le nom du setter (par defaut, le setter est "
"setFieldName)"
msgstr ""

#: ../../repository.rst:84
msgid "Disponible uniquement à partir de la version 3.4 avec le driver Pgsql"
msgstr ""

#: ../../repository.rst:86
msgid ""
"sequenceName permet de préciser le nom de la séquence à utiliser pour "
"récupérer la valeur de l'autoincrément"
msgstr ""

#: ../../repository.rst:90
msgid "Le Serializer"
msgstr ""

#: ../../repository.rst:93
msgid "Au sujet du serializer"
msgstr ""

#: ../../repository.rst:94
msgid ""
"La serialisation est l'opération qui permet de passer d'une donnée PHP "
"vers une donnée au format SGBD. La déserialisation est l'opération "
"inverse."
msgstr ""

#: ../../repository.rst:97
msgid ""
"Le serializer permet de gérer les types complexes tels que les types "
"suivants ``bool``, ``datetime`` et ``json``."
msgstr ""

#: ../../repository.rst:101
msgid ""
"Le type booléen est considéré comme un type complexe, car la façon de le "
"stocker en base est différent selon chaque SGBD :"
msgstr ""

#: ../../repository.rst:100
msgid "``CCMBenchmark\\Ting\\Driver\\Pgsql\\Serializer\\Boolean``"
msgstr ""

#: ../../repository.rst:101
msgid "``CCMBenchmark\\Ting\\Driver\\Mysqli\\Serializer\\Boolean``"
msgstr ""

#: ../../repository.rst:103
msgid ""
"Le type datetime est considéré comme complexe car il permet de "
"transformer un objet DateTime dans un format compréhensible pour le SGBD."
msgstr ""

#: ../../repository.rst:105
msgid ""
"Le type json est complexe car il permet de transformer un tableau de "
"données en chaîne de caractère compréhensible par le SGBD."
msgstr ""

#: ../../repository.rst:109
msgid "Configuration du serializer"
msgstr ""

#: ../../repository.rst:111
msgid "Le serializer peut être configurer via la clé ``serializer_options``"
msgstr ""

#: ../../repository.rst:124
msgid ""
"Je vous invite à regarder le code source de chaque Serializer pour voir "
"les configurations possibles."
msgstr ""

#: ../../repository.rst:127
msgid "Ecrire un serializer"
msgstr ""

#: ../../repository.rst:129
msgid ""
"Vous pouvez écrire vos propres serializers et les injecter dans la "
"définition du repository via la clé ``serializer``."
msgstr ""

#: ../../repository.rst:131
msgid ""
"Le serializer doit implémenter l'interface "
"``CCMBenchmark\\Ting\\Serializer\\SerializeInterface`` et/ou "
"``CCMBenchmark\\Ting\\Serializer\\UnserializeInterface``. Si l'on "
"souhaite implémenter les 2 interfaces, on préfèrera utiliser "
"``CCMBenchmark\\Ting\\Serializer\\SerializerInterface``"
msgstr ""

#: ../../repository.rst:135
msgid ""
"L'interface ``CCMBenchmark\\Ting\\Serializer\\SerializeInterface`` permet"
" de transformer une valeur en donnée stockable en base de donnée. "
"L'interface ``CCMBenchmark\\Ting\\Serializer\\UnserializeInterface`` "
"permet de faire l'opération inverse."
msgstr ""

#: ../../repository.rst:150
msgid "QueryBuilder"
msgstr ""

#: ../../repository.rst:152
msgid ""
"On peut avoir besoin de chaîner des requêtes, un QueryBuilder est adapté "
"pour ce cas. Ting le fourni via ``aura/sqlquery``."
msgstr ""

#: ../../repository.rst:159 ../../repository.rst:165 ../../repository.rst:171
msgid "ou"
msgstr ""

#: ../../repository.rst:177
msgid "Documentation disponible sur https://github.com/auraphp/Aura.SqlQuery"
msgstr ""

#: ../../repository.rst:180
msgid "Requêtes"
msgstr ""

#: ../../repository.rst:182
msgid ""
"Le Repository fourni plusieurs méthodes afin de faciliter les requêtes "
"simples."
msgstr ""

#: ../../repository.rst:185
msgid "Trouver un objet par clé primaire"
msgstr ""

#: ../../repository.rst:192
msgid "Tous les objets"
msgstr ""

#: ../../repository.rst:199
msgid "Un objet d'après une ou plusieurs propriété(s) du modèle"
msgstr ""

#: ../../repository.rst:206
msgid "Une collection d'objet d'après une ou plusieurs propriété(s) du modèle"
msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "Documentation sur https://github.com/auraphp/Aura.SqlQuery"
#~ msgstr ""

#~ msgid "int"
#~ msgstr ""

#~ msgid "double"
#~ msgstr ""

#~ msgid "string"
#~ msgstr ""

#~ msgid "bool"
#~ msgstr ""

#~ msgid "datetime"
#~ msgstr ""

#~ msgid "json"
#~ msgstr ""

#~ msgid "CCMBenchmark\\\\Ting\\\\Driver\\\\Pgsql\\\\Serializer\\\\Boolean"
#~ msgstr ""

#~ msgid "CCMBenchmark\\\\Ting\\\\Driver\\\\Mysqli\\\\Serializer\\\\Boolean"
#~ msgstr ""

#~ msgid "Vous pouvez injecter votre propre serializer :"
#~ msgstr ""

#~ msgid "Ecrire son serializer"
#~ msgstr ""

